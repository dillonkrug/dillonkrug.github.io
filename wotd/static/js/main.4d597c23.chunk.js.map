{"version":3,"sources":["var/days.js","var/months.js","DateView.js","App.js","serviceWorker.js","index.js"],"names":["days","id","name","label","months","DateView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","_this$props","date","word","react_default","a","createElement","className","getDate","Days","getDay","Months","getMonth","getFullYear","type","defn","usage","Component","Words","window","WORDS","StartDate","Date","requiredProps","VirtualizeSwipeableViews","virtualize","SwipeableViews","ValidWords","filter","i","length","now","out","getTime","push","setDate","renderSlide","_ref","key","index","day","src_DateView_0","pad","n","doTrack","location","port","ga","concat","App","slideRenderer","onChangeIndex","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d597c23.chunk.js","sourcesContent":["export default [{\n    id: 'Day.Sunday',\n    name: 'Sunday',\n    label: 'Sunday'\n}, {\n    id: 'Day.Monday',\n    name: 'Monday',\n    label: 'Monday'\n}, {\n    id: 'Day.Tuesday',\n    name: 'Tuesday',\n    label: 'Tuesday'\n}, {\n    id: 'Day.Wednesday',\n    name: 'Wednesday',\n    label: 'Wednesday'\n}, {\n    id: 'Day.Thursday',\n    name: 'Thursday',\n    label: 'Thursday'\n}, {\n    id: 'Day.Friday',\n    name: 'Friday',\n    label: 'Friday'\n}, {\n    id: 'Day.Saturday',\n    name: 'Saturday',\n    label: 'Saturday'\n}];","export default [{\n    id: 'Month.January',\n    name: 'January',\n    label: 'January'\n}, {\n    id: 'Month.February',\n    name: 'February',\n    label: 'February'\n}, {\n    id: 'Month.March',\n    name: 'March',\n    label: 'March'\n}, {\n    id: 'Month.April',\n    name: 'April',\n    label: 'April'\n}, {\n    id: 'Month.May',\n    name: 'May',\n    label: 'May'\n}, {\n    id: 'Month.June',\n    name: 'June',\n    label: 'June'\n}, {\n    id: 'Month.July',\n    name: 'July',\n    label: 'July'\n}, {\n    id: 'Month.August',\n    name: 'August',\n    label: 'August'\n}, {\n    id: 'Month.September',\n    name: 'September',\n    label: 'September'\n}, {\n    id: 'Month.October',\n    name: 'October',\n    label: 'October'\n}, {\n    id: 'Month.November',\n    name: 'November',\n    label: 'November'\n}, {\n    id: 'Month.December',\n    name: 'December',\n    label: 'December'\n}];","import React, { Component } from 'react';\nimport Days from './var/days';\nimport Months from './var/months';\nimport './DateView.css';\n\nclass DateView extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tconsole.log('DateView props', props);\n\t}\n\trender () {\n\t\tvar { date, word } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<header className=\"date-header\">\n\t\t\t\t\t\t<div className=\"date-main\">\n\t\t\t\t\t\t\t{ date.getDate() }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"date-extra\">\n\t\t\t\t\t\t\t<div className=\"date-day\">\n\t\t\t\t\t\t\t\t{ Days[date.getDay()].label }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"date-month\">\n\t\t\t\t\t\t\t\t{ Months[date.getMonth()].label }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"date-day\">\n\t\t\t\t\t\t\t\t{ date.getFullYear() }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t\t<hr className=\"divider\"/>\n\t\t\t\t\t<section className=\"word\">\n\t\t\t\t\t\t<header>{ word.word }</header>\n\t\t\t\t\t\t<div className=\"word-type\">{ word.type }</div>\n\t\t\t\t\t\t<div className=\"word-def\">{ word.defn }</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section className=\"word-usage\">\n\t\t\t\t\t\t<header className=\"usage-header\">USAGE</header>\n\t\t\t\t\t\t<hr className=\"divider\"/>\n\t\t\t\t\t\t{ word.usage }\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n    }\n}\n\t\nexport default DateView;\n\t","/* global ga, window */\nimport React, { Component } from 'react';\nimport './App.css';\nimport SwipeableViews from 'react-swipeable-views';\nimport { virtualize } from  'react-swipeable-views-utils';\n\nimport DateView from './DateView';\n\nconst Words = window.WORDS;\n\nconst StartDate = new Date(2019, 0, 1);\n\n\nconst requiredProps = ['word', 'type', 'defn', 'usage']\n\n\nconst VirtualizeSwipeableViews = virtualize(SwipeableViews);\n\n\nfunction isValidWord (word) {\n\tfor (var i = 0; i < requiredProps.length; i++) {\n\t\tif (!word[requiredProps[i]]) {\n\t\t\treturn false\n\t\t}\n\t\t\n\t}\n\treturn true;\n}\n\nconst ValidWords = Words.filter(isValidWord);\nconsole.log('Valid Word Count:', ValidWords.length);\n// const days = [{\n// \tdate: new Date(),\n// \tword: ValidWords[ValidWords.length - 1]\n// }];\n\n\n\nconst days = (function () {\n\tvar date = StartDate;\n\tvar now = Date.now();\n\tvar out = [];\n\twhile (date.getTime() < now) {\n\t\tout.push({\n\t\t\tdate: new Date(date),\n\t\t\tword: ValidWords[out.length]\n\t\t});\n\t\tdate.setDate(date.getDate() + 1);\n\t}\n\treturn out;\n}())\n\n\nfunction renderSlide ({ key, index }) {\n\tconsole.log('renderslide', key, index);\n\tif (index > 0) {\n\t\treturn (\n\t\t\t<div key={ key } className=\"come-back\">\n\t\t\t\tCome back tomorrow!\n\t\t\t</div>\n\t\t);\n\t}\n\tconst day = days[days.length - 1 + index];\n\tif (!day || !day.word) {\n\t\treturn (\n\t\t\t<div key={ key } className=\"come-back\">\n\t\t\t\tNo word (yet)\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t<div key={ key }>\n\t\t\t<DateView { ...day  }/>\n\t\t</div>\n\t);\n}\n\n\nconst pad = n => ((n < 10) ? '0' : '') + n;\n\nfunction doTrack (index) {\n\tif (!!window.location.port) {\n\t\treturn;\n\t}\n\tconst day = days[days.length - 1 + index];\n\tif (day) {\n\t\tga('send', 'pageview', `/wotd/${ day.date.getFullYear() }-${ pad(day.date.getMonth() + 1) }-${ pad(day.date.getDate()) }`)\n\t} else {\n\t\tga('send', 'pageview', '/wotd/unknown')\n\t}\n}\ndoTrack(0);\nclass App extends Component {\n\tswitchDays () {\n\n\t}\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<VirtualizeSwipeableViews\n\t\t\t\t\tslideRenderer={ renderSlide }\n\t\t\t\t\tonChangeIndex={ doTrack }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\t\nexport default App;\n\t\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}